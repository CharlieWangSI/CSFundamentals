> What are some pros and cons of using linked lists instead of arrays?

A: 

Pros: For linked lists, each node is independent in memory, so the operating system may use any available memory location to store it. Node memory independence allows linked lists to easily grow to immense sizes.

Cons: However, because each node may exist anywhere in physical memory, it can be inefficient to access an element within the list. Elements must be accessed in order, starting from the first node (the head).

> Come up with a real world example of a linked list.

A: If I want to look to identify a suspect in a list of potential suspects, I can use the following pseudocode function to identify it:

FUNCTION find(headSuspectNode, suspect)
  SET tempNode to headSuspectpNode
  WHILE tempNode exists AND NOT(tempNode.suspect = suspect)
    SET tempNode to tempNode.next
  END WHILE
  RETURN tempNode
END FUNCTION

> The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

A: 

We want to iterate through the linked list to find the last item, then append the element to the last item. The bug is that the existing code wonâ€™t iterate through the linked list and would only work for a linked list with <2 items. 

FUNCTION push(element){
CREATE node
SET node.value TO element
SET node.next TO null

IF the headnode does not exist
 THEN SET head to node
ELSE
 WHILE not (current.next = null)
 SET current to headnode.next
 SET current.next to node
END WHILE
END IF
END FUNCTION

> Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

A: 

FUNCTION remove(listHead){
  IF (listHead.next==null){
   RETURN listHead
  }
  var pre = listHead
  var cur = listHead.next

  WHILE (cur!=null){
   IF (cur.value=pre.value){
    pre.next=cur.next
    cur=cur.next
   }
  }
}

> Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

A: 

FUNCTION reverse(linkHead){
  var pre = listHead
  var cur = listHead.next
  IF (cur==null){
   RETURN pre
  }

  WHILE (var end!=null){
   var temp=cur.next
   cur.next=temp.next
   temp.next=end.next
   end.next=temp
  }
  RETURN end.next
}
 