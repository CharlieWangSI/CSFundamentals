> What are some pros and cons of using linked lists instead of arrays?

A: 

Pros: For linked lists, each node is independent in memory, so the operating system may use any available memory location to store it. Node memory independence allows linked lists to easily grow to immense sizes.

Cons: However, because each node may exist anywhere in physical memory, it can be inefficient to access an element within the list. Elements must be accessed in order, starting from the first node (the head).

> Come up with a real world example of a linked list.

A: If I want to look to identify a suspect in a list of potential suspects, I can use the following pseudocode function to identify it:

FUNCTION find(headSuspectNode, suspect)
  SET tempNode to headSuspectpNode
  WHILE tempNode exists AND NOT(tempNode.suspect = suspect)
    SET tempNode to tempNode.next
  END WHILE
  RETURN tempNode
END FUNCTION

> The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

A: 

We want to iterate through the linked list to find the last item, then append the element to the last item. The bug is that the existing code wonâ€™t iterate through the linked list and would only work for a linked list with <2 items. 

function LinkedList(){
  var length =0;
  var head =null;

  var Node = function(element){
    this.element=element;
    this.next=null;
    this.previous=null;
  };

  this.size=function(){
    return length;
  };

  this.head=function(){
    return head;
  }

  this.push=function(element){
    var node = new Node(element);
    if (head===null){
      head=node;
    }else{
      var currentNode= head;

      while(currentNode.next){
        currentNode=currentNode.next;
      }

      currentNode.next=node;
    }

    length++;
  };

}
> Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

A: 

function LinkedList(){
  var length =0;
  var head =null;

  var Node = function(element){
    this.element=element;
    this.next=null;
    this.previous=null;
  };

  this.size=function(){
    return length;
  };

  this.head=function(){
    return head;
  }

  this.push=function(element){
    var node = new Node(element);
    if (head===null){
      head=node;
    }else{
      var currentNode= head;

      while(currentNode.next){
        currentNode=currentNode.next;
      }

      currentNode.next=node;
    }

    length++;
  };

  this.removeDup=function(){
    var buffer=[];
    var curr=head;
    while (curr){
      for (var i=0;i<buffer.length;i++){
        if (buffer[i].element == curr.element){
        curr.previous.next=curr.next
        length--
      }
      else{
        buffer[i].element=curr.element
      }
      }
      curr=curr.next
    }
  }

}

> Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

A: 

function LinkedList(){
  var length =0;
  var head =null;

  var Node = function(element){
    this.element=element;
    this.next=null;
    this.previous=null;
  };

  this.size=function(){
    return length;
  };

  this.head=function(){
    return head;
  }

  this.push=function(element){
    var node = new Node(element);
    if (head===null){
      head=node;
    }else{
      var currentNode= head;

      while(currentNode.next){
        currentNode=currentNode.next;
      }

      currentNode.next=node;
    }

    length++;
  };

  this.removeDup=function(){
    var buffer=[];
    var curr=head;
    while (curr){
      for (var i=0;i<buffer.length;i++){
        if (buffer[i].element == curr.element){
        curr.previous.next=curr.next
        length--
      }
      else{
        buffer[i].element=curr.element
      }
      }
      curr=curr.next
    }
  }

  this.reverse=function(){
    var stack=[];
    var curr=head;

    while(curr){
      stack.push(curr);
      curr=curr.next;
    }

    var result=stack.pop();
    curr=result;

    while (curr){
      curr.next=stack.pop();
      curr=curr.next;
    }

    return result;
  }
}