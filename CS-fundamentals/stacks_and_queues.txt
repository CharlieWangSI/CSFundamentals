> What is the main difference between a stack and a queue?

A: The stack data structure implements a LIFO priority collection, and queue implements a FIFO priority. 

> What are the similarities between stacks and queues?

A: They are both common place data structure. 

> Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

A: The data structure for undo and redo is a stack. We can use separate stacks for undo and redo information, and simply transfer items between them, i.e.:

every new action you do is pushed on the undo stack,
every undo pops an item off the undo stack and pushes it onto the redo stack,
every redo pops an item off the redo stack and pushes it onto the undo stack.

> Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

A: We want to use the push and pop method of a Stack data structure.

  FUNCTION REVERSE(original){
    new stack = “”
    FOR (i=0;i<original.length;i++){
     stack.push WITH original[i]
    }
    new reversed =“”
    WHILE (stack !=null){
     reversed.append(stack.pop())
    }
    RETURN reversed
  }

> Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

A: 

FUNCTION dequeue(queue){
  queue.slice(1,queue.length)
  RETURN queue[0]
}

FUNCTION pop(queue){
 queue.dequeue
}

> To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

A: 

FUNCTION DELETE(original){
  FOR (i=0;i<original.length-1;i++){
    enqueue (original[i]) 
  }
  WHILE (queue!=null){
   queue.dequeue
   RETURN queue
 }
}
