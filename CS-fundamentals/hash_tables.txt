> What is a hash table?
A: In computer science, the hash data structure, also referred to as a hash table, is a type of data structure that stores each value by linking it to a key, forming key-value pairs, just like JavaScript objects.

> What is hashing?
A: Hashing is the conversion from a string to a numerical index.

> How does a hash table store data?
A: A hashing function is used to convert the key to a specific, fixed-length number, referred to as a hash code. Once a hash table has a hash code it can use as a key, it can figure out where to place the key-value pair in its internal array.

> How are hash tables and objects different?
A: If your data is a static number of distinct values of different types, then an object is the optimal choice. Use a hash table when your data contains a variable number of consistently formatted values, each with an identifier.

>Determine whether you would use a hash table or an object to store each of the following pieces of data:
A:
A list of pets and their unique names:Hash table
The name, age, and the birthday of your best friend: Object
The name and location of every company in a given city: Hash table
All of the books checked out from a library by a particular individual: Hash table
The primary and secondary phone numbers for a contact: Hash table

>Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.
A:

let hash = (string, max)=> {
  var hash = 0;
  for(var i=0; i< string.length;i++){
    hash+= string.charCodeAt(i);
  }
  return hash % max;
}

class customers {
    constructor() {
      this.customer=[]
      this.customerLimit = 50;
    }

    add(name,address,number) {
      let customer = {
        name:name,
        address:address,
        number:number
      };
      let index = hash(number,this.customerLimit);
      if (!this.customer[index]) {
        this.customer[index] = [];
      } 
      this.customer[index].push(customer);
    }

    search(number) {
    
      let index = hash(number, this.customerLimit);
      let result = [];
      if (!this.customer[index]) { return 'No results found' }
      this.customer[index].forEach(entry => {
        if (entry.number === number) {
          result.push(entry);
        }
      })

      return result;
    }
  }

>Build a system that allows a store owner to track their store's inventory using a hash table for storage.
A: 

let hash = (string, max)=> {
  var hash = 0;
  for(var i=0; i< string.length;i++){
    hash+= string.charCodeAt(i);
  }
  return hash % max;
}

class inventory {
    constructor() {
      this.product=[]
      this.productLimit = 50;
    }

    add(name,quantity) {
      let product = {
        name:name,
        quantity:quantity
      };
      let index = hash(name,this.productLimit);
      if (!this.product[index]) {
        this.product[index] = [];
      } 
      this.product[index].push(product);
    }

    search(name) {
      let index = hash(name, this.productLimit);
      let result = [];
      if (!this.product[index]) { return 'No results found' }
      this.product[index].forEach(entry => {
        if (entry.name === name) {
          result.push(entry);
        }
      })
      return result;
    }
  }

>Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.
A:


let hash = (string, max)=> {
  var hash = 0;
  for(var i=0; i< string.length;i++){
    hash+= string.charCodeAt(i);
  }
  return hash % max;
}

  class Newspaper {
    constructor(){ 
      this.storage = [];
      this.digitalCopiesLimit = 40;
    }

    add(publisher, pubDate) {
      let key = publisher + pubDate;
      let story = {
        publisher: publisher,
        publishDate: pubDate
      };
      let index = hash(key, 100);
      if (!this.storage[index]) {
        this.storage[index] = [];
      } 
      this.storage[index].push(story);
    }

    search(publisher, pubDate) {
      let key = publisher + pubDate;
      let index = hash(key, this.digitalCopiesLimit);
      let result = [];
      if (!this.storage[index]) { return 'No results found' }

      this.storage[index].forEach(entry => {
        if (entry.publisher === publisher && entry.publishDate === pubDate) {
          result.push(entry);
        }
      })

      return result;
    }
  }